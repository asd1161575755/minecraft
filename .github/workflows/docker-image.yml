name: Minecraft Docker Image CI

# 触发配置
on:
  schedule:
    - cron: '0 0 */3 * *'
  workflow_dispatch:
    inputs:
      SERVER_VERSION:
        description: '要构建的Minecraft版本；只打版本镜像且会跳过`检查版本是否更新`和`记录最后构建版本`步骤'
        required: false
        default: ''
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Step 1: 设置Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 2: 为多平台构建安装QEMU
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    # Step 3: 登录 Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: 获取 Fabric 相关版本信息
    - name: Fetch Fabric version info
      id: fabric_version_info
      run: |
        # Fabric版本地址
        FABRIC_META_URL="https://meta.fabricmc.net/v2/versions"
        # 获取稳定的 Minecraft Server 版本
        SERVER_VERSION=$(curl -s $FABRIC_META_URL/game | jq -r '[.[] | select(.stable==true)][0].version')
        # 获取稳定的 Fabric Loader 版本
        FABRIC_LOADER_VERSION=$(curl -s $FABRIC_META_URL/loader | jq -r '[.[] | select(.stable==true)][0].version')
        # 获取稳定的 Fabric Installer 版本
        FABRIC_INSTALLER_VERSION=$(curl -s $FABRIC_META_URL/installer | jq -r '[.[] | select(.stable==true)][0].version')
        # 生成 Fabric Server 下载 URL
        FABRIC_SERVER_URL="https://meta.fabricmc.net/v2/versions/loader/${SERVER_VERSION}/${FABRIC_LOADER_VERSION}/${FABRIC_INSTALLER_VERSION}/server/jar"
        # 将信息写入ENV
        echo "SERVER_VERSION=$SERVER_VERSION" >> $GITHUB_ENV
        echo "FABRIC_LOADER_VERSION=$FABRIC_LOADER_VERSION" >> $GITHUB_ENV
        echo "FABRIC_INSTALLER_VERSION=$FABRIC_INSTALLER_VERSION" >> $GITHUB_ENV
        echo "FABRIC_SERVER_URL=$FABRIC_SERVER_URL" >> $GITHUB_ENV

    # Step 5: 检查版本是否更新
    - name: Check if version is updated
      id: check_version
      run: |
        # 检查是否手动输入了 SERVER_VERSION
        if [ -z "${{ github.event.inputs.SERVER_VERSION }}" ]; then
          # 尝试从`last_built_version.txt`中获取版本号
          if [ -f last_built_version.txt ]; then
            LAST_BUILT_VERSION=$(cat last_built_version.txt)
          else
            LAST_BUILT_VERSION="none"
          fi
          # 检查是否需要继续构建
          if [ "$LAST_BUILT_VERSION" = "none" ]; then
            # 没有旧版本时继续构建
            echo "BUILD_NEEDED=true" >> $GITHUB_ENV
          elif [ "$SERVER_VERSION" \> "$LAST_BUILT_VERSION" ]; then
            # 如果新版本大于旧版本则继续构建
            echo "BUILD_NEEDED=true" >> $GITHUB_ENV
          else
            # 如果新版本不大于旧版本则跳过构建
            echo "BUILD_NEEDED=false" >> $GITHUB_ENV
          fi
        else
          # 手动输入版本则直接构建
          echo "BUILD_NEEDED=true" >> $GITHUB_ENV
        fi
    
    # Step 6: 获取 Fabric API 下载 URL
    - name: Fetch Fabric API download URL
      if: env.BUILD_NEEDED == 'true'
      id: fabric_api_download_url
      run: |
        # Fabric API版本地址
        FABRIC_API_URL="https://api.github.com/repos/FabricMC/fabric/releases" 
        # 获取与当前 Server 版本匹配的 Fabric API 下载 URL
        FABRIC_API_DOWNLOAD_URL=$(curl -s $FABRIC_API_URL | jq -r --arg SERVER_VERSION "$SERVER_VERSION" '[.[] | select(.target_commitish==$SERVER_VERSION)][0].assets[0].browser_download_url')
        # 将信息写入ENV
        echo "FABRIC_API_DOWNLOAD_URL=$FABRIC_API_DOWNLOAD_URL" >> $GITHUB_ENV

    # Step 7: 下载 Fabric Server 和 Fabric API
    - name: Download Fabric server and API
      if: env.BUILD_NEEDED == 'true'
      run: |
        # 下载 Fabric Server
        curl -fSL -o fabric-server.jar "$FABRIC_SERVER_URL"
        # 创建 mods 目录并下载 Fabric API
        mkdir -p mods && curl -fSL -o mods/fabric-api.jar "$FABRIC_API_DOWNLOAD_URL"

    # Step 8: 生成随机RCON密码
    - name: Generate random RCON password
      if: env.BUILD_NEEDED == 'true'
      id: generate_password
      run: |
        RCON_PASSWORD=$(openssl rand -base64 30 | tr -dc 'A-Za-z0-9' | head -c 30)
        echo "RCON_PASSWORD=$RCON_PASSWORD" >> $GITHUB_ENV

    # Step 9: 将随机生成的密码写入 server.properties
    - name: Update server.properties with RCON password
      if: env.BUILD_NEEDED == 'true'
      run: |
        sed -i '/^rcon.password=/c\rcon.password=${{ env.RCON_PASSWORD }}' server.properties

    # Step 10: 准备 Docker 镜像标签
    - name: Prepare Docker tags
      id: prepare_tags
      if: env.BUILD_NEEDED == 'true'
      run: |
        if [ -n "${{ github.event.inputs.SERVER_VERSION }}" ]; then
          echo "TAGS=fc6a1b03/minecraft-server-fabric:${{ github.event.inputs.SERVER_VERSION }}" >> $GITHUB_ENV
        else
          echo "TAGS=fc6a1b03/minecraft-server-fabric:latest,fc6a1b03/minecraft-server-fabric:${{ env.SERVER_VERSION }}" >> $GITHUB_ENV
        fi
    
    # Step 11: 为多种架构构建和推送Docker镜像
    - name: Build and push Docker image
      if: env.BUILD_NEEDED == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.TAGS }}
        platforms: linux/amd64,linux/arm64

    # Step 12: 更新记录的最后构建版本
    - name: Update last built version
      if: env.BUILD_NEEDED == 'true' && github.event.inputs.SERVER_VERSION == ''
      run: |
        echo $SERVER_VERSION > last_built_version.txt
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git add last_built_version.txt
        git commit -m "Update last built version to $SERVER_VERSION"
        git push --force
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
